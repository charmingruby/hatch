// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	broker "github/charmingruby/pack/internal/device/delivery/broker"

	mock "github.com/stretchr/testify/mock"
)

// DevicePublisher is an autogenerated mock type for the DevicePublisher type
type DevicePublisher struct {
	mock.Mock
}

// DispatchDeviceRegistered provides a mock function with given fields: msg
func (_m *DevicePublisher) DispatchDeviceRegistered(msg broker.DeviceRegisteredMessage) error {
	ret := _m.Called(msg)

	if len(ret) == 0 {
		panic("no return value specified for DispatchDeviceRegistered")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(broker.DeviceRegisteredMessage) error); ok {
		r0 = rf(msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewDevicePublisher creates a new instance of DevicePublisher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDevicePublisher(t interface {
	mock.TestingT
	Cleanup(func())
}) *DevicePublisher {
	mock := &DevicePublisher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
