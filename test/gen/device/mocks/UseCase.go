// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	service "github/charmingruby/gew/internal/device/service"

	mock "github.com/stretchr/testify/mock"
)

// UseCase is an autogenerated mock type for the UseCase type
type UseCase struct {
	mock.Mock
}

// CreateDevice provides a mock function with given fields: in
func (_m *UseCase) CreateDevice(in service.CreateDeviceInput) error {
	ret := _m.Called(in)

	if len(ret) == 0 {
		panic("no return value specified for CreateDevice")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(service.CreateDeviceInput) error); ok {
		r0 = rf(in)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUseCase creates a new instance of UseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *UseCase {
	mock := &UseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
