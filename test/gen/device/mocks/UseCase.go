// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"
	service "github/charmingruby/pack/internal/device/service"

	mock "github.com/stretchr/testify/mock"
)

// UseCase is an autogenerated mock type for the UseCase type
type UseCase struct {
	mock.Mock
}

// CreateDevice provides a mock function with given fields: ctx, in
func (_m *UseCase) CreateDevice(ctx context.Context, in service.CreateDeviceInput) (service.CreateDeviceOuput, error) {
	ret := _m.Called(ctx, in)

	if len(ret) == 0 {
		panic("no return value specified for CreateDevice")
	}

	var r0 service.CreateDeviceOuput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, service.CreateDeviceInput) (service.CreateDeviceOuput, error)); ok {
		return rf(ctx, in)
	}
	if rf, ok := ret.Get(0).(func(context.Context, service.CreateDeviceInput) service.CreateDeviceOuput); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Get(0).(service.CreateDeviceOuput)
	}

	if rf, ok := ret.Get(1).(func(context.Context, service.CreateDeviceInput) error); ok {
		r1 = rf(ctx, in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUseCase creates a new instance of UseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *UseCase {
	mock := &UseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
