// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"
	model "github/charmingruby/pack/internal/device/model"

	mock "github.com/stretchr/testify/mock"
)

// DeviceRepository is an autogenerated mock type for the DeviceRepository type
type DeviceRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, device
func (_m *DeviceRepository) Create(ctx context.Context, device model.Device) error {
	ret := _m.Called(ctx, device)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Device) error); ok {
		r0 = rf(ctx, device)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByHardwareIDAndType provides a mock function with given fields: ctx, hwID, hwType
func (_m *DeviceRepository) FindByHardwareIDAndType(ctx context.Context, hwID string, hwType string) (model.Device, error) {
	ret := _m.Called(ctx, hwID, hwType)

	if len(ret) == 0 {
		panic("no return value specified for FindByHardwareIDAndType")
	}

	var r0 model.Device
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (model.Device, error)); ok {
		return rf(ctx, hwID, hwType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) model.Device); ok {
		r0 = rf(ctx, hwID, hwType)
	} else {
		r0 = ret.Get(0).(model.Device)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, hwID, hwType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewDeviceRepository creates a new instance of DeviceRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDeviceRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *DeviceRepository {
	mock := &DeviceRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
