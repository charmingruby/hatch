// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	model "HATCH_APP/internal/note/model"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// NoteRepo is an autogenerated mock type for the NoteRepo type
type NoteRepo struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, note
func (_m *NoteRepo) Create(ctx context.Context, note model.Note) error {
	ret := _m.Called(ctx, note)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Note) error); ok {
		r0 = rf(ctx, note)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByID provides a mock function with given fields: ctx, id
func (_m *NoteRepo) FindByID(ctx context.Context, id string) (model.Note, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 model.Note
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (model.Note, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) model.Note); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(model.Note)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx
func (_m *NoteRepo) List(ctx context.Context) ([]model.Note, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []model.Note
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]model.Note, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []model.Note); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Note)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, note
func (_m *NoteRepo) Save(ctx context.Context, note model.Note) error {
	ret := _m.Called(ctx, note)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Note) error); ok {
		r0 = rf(ctx, note)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewNoteRepo creates a new instance of NoteRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNoteRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *NoteRepo {
	mock := &NoteRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
